/*
 * The MIT License
 *
 * Copyright 2015 radityopw.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package bangsoal;

import bangsoal.dao.SubjectDaoFile;
import bangsoal.shared.Common;
import bangsoal.shared.Configuration;
import bangsoal.shared.Version;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author radityopw
 */
public class StartUp extends javax.swing.JFrame {

    Configuration conf;

    /**
     * Creates new form StartUp
     */
    public StartUp() {
        initComponents();
        conf = Configuration.getInstance();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed

        if (evt.getActionCommand().trim().equalsIgnoreCase("ApproveSelection")) {

            boolean errorOccured = false;

            conf.setWorkingDir(this.jFileChooser1.getSelectedFile());

            File node = conf.getWorkingDir();

            if (node.isDirectory()) {
                List<String> subNote = Arrays.asList(node.list());

                if (subNote.contains("init.bgs")) {

                    File init = new File(node, "init.bgs");

                    Object obj = Common.fileToObject(init.getPath());

                    if (obj == null) {
                        JOptionPane.showMessageDialog(null, "Data Init Tidak Bisa Dibuka", "Error SU:3", JOptionPane.ERROR_MESSAGE);
                        errorOccured = true;
                    } else {

                        if (obj instanceof Version) {
                            Version v = (Version) obj;
                            conf.setVersion(v);
                        } else {
                            JOptionPane.showMessageDialog(null, "Data Init Keliru", "Error SU:4", JOptionPane.ERROR_MESSAGE);
                            errorOccured = true;
                        }

                    }

                } else {
                    if (subNote.size() == 0) {
                        JOptionPane.showMessageDialog(null, "Menggunakan Direktori Kosong", "Konfirmasi", JOptionPane.INFORMATION_MESSAGE);
                        Version v = new Version();
                        conf.setVersion(v);

                        File versionFile = new File(conf.getWorkingDir(), "init.bgs");

                        try {
                            Common.objectToFile(versionFile.getAbsolutePath(), v);

                            File dir = new File(conf.getWorkingDir(), "subjects");
                            if (!dir.exists()) {
                                dir.mkdir();
                            }

                            dir = new File(conf.getWorkingDir(), "concepts");
                            if (!dir.exists()) {
                                dir.mkdir();
                            }

                            dir = new File(conf.getWorkingDir(), "questions");
                            if (!dir.exists()) {
                                dir.mkdir();
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(StartUp.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Bukan Direktori Valid", "Error SU:2", JOptionPane.ERROR_MESSAGE);
                        errorOccured = true;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Bukan Direktori ", "Error SU:1", JOptionPane.ERROR_MESSAGE);
                errorOccured = true;
            }

            if (errorOccured) {
                System.exit(1);
            }

            new SubjectView(new SubjectDaoFile()).setVisible(true);
            this.dispose();

        } else {
            System.exit(0);
        }


    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
